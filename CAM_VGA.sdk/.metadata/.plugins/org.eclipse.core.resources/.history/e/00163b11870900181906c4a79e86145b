#include "stdio.h"
#include "xgpiops.h"
#include "sleep.h"

#include "SCCB_drv.h"

extern XGpioPs 		SccbInstancePtr;
extern XGpioPs_Config* SccbConfigPtr;

uint8_t SCCB_InitPorts(void)
{
	SccbConfigPtr = XGpioPs_LookupConfig(XPAR_PS7_GPIO_0_DEVICE_ID);
	if(SccbConfigPtr == NULL)
	{
		return XST_DEVICE_NOT_FOUND;
	}

	int xStatus = XGpioPs_CfgInitialize(&SccbInstancePtr,SccbConfigPtr, SccbConfigPtr->BaseAddr);
	if(XST_SUCCESS != xStatus)
	{
		return XST_FAILURE;
	}

	XGpioPs_SetDirectionPin(&SCCB_OBJ, SCCB_SCL, OUTPUT);
	XGpioPs_SetDirectionPin(&SCCB_OBJ, SCCB_SDA, OUTPUT);

	XGpioPs_WritePin(&SCCB_OBJ, SCCB_SCL, HIGH);
	XGpioPs_WritePin(&SCCB_OBJ, SCCB_SDA, HIGH);

	XGpioPs_WritePin(&SCCB_OBJ, SCCB_SCL, LOW);
	XGpioPs_WritePin(&SCCB_OBJ, SCCB_SDA, LOW);

	XGpioPs_WritePin(&SCCB_OBJ, SCCB_SCL, HIGH);
	XGpioPs_WritePin(&SCCB_OBJ, SCCB_SDA, HIGH);

	return XST_SUCCESS;
}

// ---------------------------------------------------------------------------------------- //

/*!
 *  @brief      SCCB起始信号
 *  @since      v5.0
 */
static uint8_t SCCB_Start(void)
{
    SDA_H();
    SCL_H();
    SCCB_DELAY();

    SDA_DDR_IN();
    if(!SDA_IN())
    {
        SDA_DDR_OUT();
        return 0;   /* SDA线为低电平则总线忙,退出 */
    }
    SDA_DDR_OUT();
    SDA_L();

    SCCB_DELAY();
    SCL_L();

    if(SDA_IN())
    {
        SDA_DDR_OUT();
        return 0;   /* SDA线为高电平则总线出错,退出 */
    }

    return 1;
}

/*!
 *  @brief      SCCB停止信号
 *  @since      v5.0
 */
static void SCCB_Stop(void)
{
    SCL_L();
    //SCCB_DELAY();
    SDA_L();
    SCCB_DELAY();
    SCL_H();
    SCCB_DELAY();
    SDA_H();
    SCCB_DELAY();
}

/*!
 *  @brief      SCCB应答信号
 *  @since      v5.0
 */
static void SCCB_Ack(void)
{
    SCL_L();
    SCCB_DELAY();
    SDA_L();
    SCCB_DELAY();
    SCL_H();
    SCCB_DELAY();
    SCL_L();
    SCCB_DELAY();
}

/*!
 *  @brief      SCCB无应答信号
 *  @since      v5.0
 */
static void SCCB_NoAck(void)
{
    SCL_L();
    SCCB_DELAY();
    SDA_H();
    SCCB_DELAY();
    SCL_H();
    SCCB_DELAY();
    SCL_L();
    SCCB_DELAY();
}

/*!
 *  @brief      SCCB 等待应答
 *  @return     应答结果（0表示无应答，1表示有应答）
 *  @since      v5.0
 */
static int SCCB_WaitAck(void)
{
    SCL_L();
    //SDA_H();
    SDA_DDR_IN();

    SCCB_DELAY();
    SCL_H();

    SCCB_DELAY();

    if(SDA_IN())           //应答为高电平，异常，通信失败
    {
        SDA_DDR_OUT();
        SCL_L();
        return 0;
    }
    SDA_DDR_OUT();
    SCL_L();
    return 1;
}

/*!
 *  @brief      SCCB 发送的数据
 *  @param      SendByte    需要发送的数据
 *  @since      v5.0
 */
static void SCCB_SendByte(uint8_t SendByte)
{
    uint8_t i = 8;
    while(i--)
    {

        if(SendByte & 0x80)     //SDA 输出数据
        {
            SDA_H();
        }
        else
        {
            SDA_L();
        }
        SendByte <<= 1;
        SCCB_DELAY();
        SCL_H();                //SCL 拉高，采集信号
        SCCB_DELAY();
        SCL_L();                //SCL 时钟线拉低
        //SCCB_DELAY();
    }
    //SCL_L();
}

/*!
 *  @brief      接收SCCB总线的数据
 *  @return     接收到的数据
 *  @since      v5.0
 */
static int SCCB_ReceiveByte(void)
{
    uint8_t i = 8;
    uint8_t ReceiveByte = 0;

    //SDA_H();
    //SCCB_DELAY();
    SDA_DDR_IN();

    while(i--)
    {
        ReceiveByte <<= 1;
        SCL_L();
        SCCB_DELAY();
        SCL_H();
        SCCB_DELAY();

        if(SDA_IN())
        {
            ReceiveByte |= 0x01;
        }
    }
    SDA_DDR_OUT();
    SCL_L();
    return ReceiveByte;
}

// ---------------------------------------------------------------------------------------- //

int16_t SCCB_WriteByte_soft(uint8_t SlaveAddress, uint8_t REG_Address, uint8_t REG_data)
{
    if(!SCCB_Start())
    {
        return 0;
    }
    SCCB_SendByte( SlaveAddress<<1|0 );                    /* 器件地址 */
    if(!SCCB_WaitAck())
    {
        SCCB_Stop();
        return 0;
    }
    SCCB_SendByte((uint8_t)(REG_Address & 0x00FF));   /* 设置低起始地址 */
    SCCB_WaitAck();
    SCCB_SendByte(REG_data);
    SCCB_WaitAck();
    SCCB_Stop();
    return 1;
}

int16_t SCCB_ReadByte_soft(uint8_t SlaveAddress, uint8_t REG_Address)
{
    uint8_t pBuffer = 0;

    if(!SCCB_Start())
    {
        return 0;
    }
    SCCB_SendByte(SlaveAddress<<1|0);         /* 器件地址 */
    if(!SCCB_WaitAck())
    {
        SCCB_Stop();
        return 0;
    }
    SCCB_SendByte(REG_Address);           /* 设置低起始地址 */
    SCCB_WaitAck();
    SCCB_Stop();

    if(!SCCB_Start())
    {
        return 0;
    }
    SCCB_SendByte(SlaveAddress<<1|1);               /* 器件地址 */

    if(!SCCB_WaitAck())
    {
        SCCB_Stop();
        return 0;
    }
    // while(length)
    // {
    //     *pBuffer = SCCB_ReceiveByte();
    //     if(length == 1)
    //     {
    //         SCCB_NoAck();
    //     }
    //     else
    //     {
    //         SCCB_Ack();
    //     }
    //     pBuffer++;
    //     length--;
    // }

    pBuffer = SCCB_ReceiveByte();       // 只读一个数据
    SCCB_NoAck();

    SCCB_Stop();

    return pBuffer;
}
